package query

import (
	"bytes"
	"cloud-gate/migration/migration"
	"cloud-gate/proxy/pkg/cqlparser"
	"cloud-gate/proxy/pkg/frame"
	"encoding/hex"
	"testing"
)

func TestAddKeyspace(t *testing.T) {
	// packets generated by CQLSH for command:
	// insert into taSKs(id, name) values (2, 'two');
	command1 := []byte{0x04, 0x00, 0x00, 0x06, 0x07, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x2e, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x74, 0x61, 0x53, 0x4b, 0x73, 0x28, 0x69, 0x64, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x28, 0x32, 0x2c, 0x20, 0x27, 0x74, 0x77, 0x6f, 0x27, 0x29, 0x3b, 0x00, 0x01, 0x34, 0x00, 0x00, 0x00, 0x64, 0x00, 0x08, 0x00, 0x05, 0xa4, 0x35, 0x5d, 0x4f, 0x7a, 0x04}
	f1 := frame.New(command1)
	paths1, _ := cqlparser.CassandraParseRequest(&cqlparser.PreparedQueries{}, command1)

	q1 := New(&migration.Table{}, Type("insert"), f1, "0.0.0.0:00000", paths1).AddKeyspace("codebase")
	correct1 := []byte{0x04, 0x00, 0x00, 0x06, 0x07, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x37, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x74, 0x61, 0x53, 0x4b, 0x73, 0x28, 0x69, 0x64, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x28, 0x32, 0x2c, 0x20, 0x27, 0x74, 0x77, 0x6f, 0x27, 0x29, 0x3b, 0x00, 0x01, 0x34, 0x00, 0x00, 0x00, 0x64, 0x00, 0x08, 0x00, 0x05, 0xa4, 0x35, 0x5d, 0x4f, 0x7a, 0x04}
	if !bytes.Equal(q1.Query, correct1) {
		t.Error("Incorrect insertion of keyspace for q1")
		t.Log(hex.Dump(q1.Query))
	}

	q2 := New(&migration.Table{}, Type("insert"), f1, "0.0.0.0:00000", paths1).AddKeyspace("CodeBase")
	correct2 := []byte{0x04, 0x00, 0x00, 0x06, 0x07, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x39, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x22, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x73, 0x65, 0x22, 0x2e, 0x74, 0x61, 0x53, 0x4b, 0x73, 0x28, 0x69, 0x64, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x28, 0x32, 0x2c, 0x20, 0x27, 0x74, 0x77, 0x6f, 0x27, 0x29, 0x3b, 0x00, 0x01, 0x34, 0x00, 0x00, 0x00, 0x64, 0x00, 0x08, 0x00, 0x05, 0xa4, 0x35, 0x5d, 0x4f, 0x7a, 0x04}
	if !bytes.Equal(q2.Query, correct2) {
		t.Error("Incorrect insertion of keyspace for q2")
		t.Log(hex.Dump(q2.Query))
	}

	// packets generated by CQLSH for command:
	// insert into "taSKs"(id, name) values (2, 'two');
	command2 := []byte{0x04, 0x00, 0x00, 0x7b, 0x07, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x30, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x22, 0x74, 0x61, 0x53, 0x4b, 0x73, 0x22, 0x28, 0x69, 0x64, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x20, 0x28, 0x32, 0x2c, 0x20, 0x27, 0x74, 0x77, 0x6f, 0x27, 0x29, 0x3b, 0x00, 0x01, 0x34, 0x00, 0x00, 0x00, 0x64, 0x00, 0x08, 0x00, 0x05, 0xa4, 0x36, 0x89, 0xa1, 0x2b, 0x07}
	f2 := frame.New(command2)
	paths2, _ := cqlparser.CassandraParseRequest(&cqlparser.PreparedQueries{}, command2)

	q3 := New(&migration.Table{}, Type("insert"), f2, "0.0.0.0:00000", paths2).AddKeyspace("codebase")
	correct3 := []byte{0x04, 0x00, 0x00, 0x7b, 0x07, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x39, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x22, 0x74, 0x61, 0x53, 0x4b, 0x73, 0x22, 0x28, 0x69, 0x64, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x20, 0x28, 0x32, 0x2c, 0x20, 0x27, 0x74, 0x77, 0x6f, 0x27, 0x29, 0x3b, 0x00, 0x01, 0x34, 0x00, 0x00, 0x00, 0x64, 0x00, 0x08, 0x00, 0x05, 0xa4, 0x36, 0x89, 0xa1, 0x2b, 0x07}
	if !bytes.Equal(q3.Query, correct3) {
		t.Error("Incorrect insertion of keyspace for q3")
		t.Log(hex.Dump(q3.Query))
	}

	q4 := New(&migration.Table{}, Type("insert"), f2, "0.0.0.0:00000", paths2).AddKeyspace("CodeBase")
	correct4 := []byte{0x04, 0x00, 0x00, 0x7b, 0x07, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x3b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x22, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x73, 0x65, 0x22, 0x2e, 0x22, 0x74, 0x61, 0x53, 0x4b, 0x73, 0x22, 0x28, 0x69, 0x64, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x20, 0x28, 0x32, 0x2c, 0x20, 0x27, 0x74, 0x77, 0x6f, 0x27, 0x29, 0x3b, 0x00, 0x01, 0x34, 0x00, 0x00, 0x00, 0x64, 0x00, 0x08, 0x00, 0x05, 0xa4, 0x36, 0x89, 0xa1, 0x2b, 0x07}
	if !bytes.Equal(q4.Query, correct4) {
		t.Error("Incorrect insertion of keyspace for q4")
		t.Log(hex.Dump(q4.Query))
	}
}
